@model IEnumerable<Elearn.ElearnModel.Module>

@{
    ViewData["Title"] = "StudentModule";
}

<style>
    body {
        color: white;
    }
    /* Style the buttons that are used to open and close the accordion panel */
    .accordion {
        background-color: #eee;
        font-size:20px;
        color: #444;
        cursor: pointer;
        padding: 18px;
        width: 100%;
        text-align: center;
        border: none;
        outline: none;
        transition: 0.4s;

    }

        /* Add a background color to the button if it is clicked on (add the .active class with JS), and when you move the mouse over it (hover) */
        .active, .accordion:hover {
            background-color: #86C232;
        }

    /* Style the accordion panel. Note: hidden by default */
    .panel {
        padding: 0 18px;
        background-color: white;
        display: none;
        overflow: hidden;
    }
    .uif {
        height: 400px;
        width: 800px;
        margin-left: auto;
        margin-right: auto;
        display: block
    }
</style>
@foreach (var item in Model)
{

    <button class="accordion"> @Html.DisplayFor(modelItem => item.Modulename)</button>
    <div class="panel">
        <div >
            <iframe class="uif" src="@Url.Content(item.Video)" title="description">VS</iframe>
        </div></div>



}




<script>

    var acc = document.getElementsByClassName("accordion");
    var i;

    for (i = 0; i < acc.length; i++) {
        acc[i].addEventListener("click", function () {
            /* Toggle between adding and removing the "active" class,
            to highlight the button that controls the panel */
            this.classList.toggle("active");

            /* Toggle between hiding and showing the active panel */
            var panel = this.nextElementSibling;
            if (panel.style.display === "block") {
                panel.style.display = "none";
            } else {
                panel.style.display = "block";
            }
        });
    }
</script>